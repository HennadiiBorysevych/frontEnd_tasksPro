{"version":3,"file":"static/js/263.15d63620.chunk.js","mappings":"8RAIaA,EAAmBC,EAAAA,QAAAA,IAAH,0GAKzBC,EAAAA,GAAAA,OALyB,+CAQzBA,EAAAA,GAAAA,MARyB,sDAahBC,EAAmBF,EAAAA,QAAAA,GAAH,6GAMzBC,EAAAA,GAAAA,OANyB,qCAUhBE,EAAkBH,EAAAA,QAAAA,OAAH,4bACN,SAAAI,GAAK,OAAIA,EAAMC,MAAMC,QAAQC,WAAWC,QAAnC,IAUhB,SAAAJ,GAAK,OAAIA,EAAMC,MAAMC,QAAQG,KAAKC,OAA7B,IAYHC,EAAaX,EAAAA,QAAAA,KAAH,uNAID,SAAAI,GAAK,OAAIA,EAAMC,MAAMC,QAAQC,WAAWK,cAAnC,IAChB,SAAAR,GAAK,OAAIA,EAAMC,MAAMC,QAAQC,WAAWC,QAAnC,I,UC2ChB,EA5Ec,WACZ,IAAQK,GAAkBC,EAAAA,EAAAA,MAAlBD,cACR,GAAkDE,EAAAA,EAAAA,MAA1CC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,YAC1BC,GAAoBC,EAAAA,EAAAA,MAApBD,gBACFE,GAAWC,EAAAA,EAAAA,MAejB,OACE,iCACE,SAAC,KAAD,KACA,SAAC,KAAD,CAAiBC,OAAO,cAAcC,gBAhBlB,CACtB,uBAAwB,CACtBC,gBAAiB,YAcjB,UACE,UAAC1B,EAAD,YACE,SAAC,KAAD,CAAiB2B,UAbP,SAAAC,GAChB,IAAMC,GAAkBC,EAAAA,EAAAA,IAAiBF,EAAQR,GACjD,GAAIS,EAAiB,CACnB,IAAQE,EAAiBF,EAAjBE,QAASC,EAAQH,EAARG,IACjBV,EAASS,EAAQC,GAClB,CACF,EAOO,UACE,SAAC,KAAD,CACEC,YAAY,cACZC,UAAU,aACVC,KAAK,SAHP,SAKG,SAAAC,GAAQ,OACP,UAACjC,GAAD,kBACMiC,EAASC,gBADf,IAEEC,IAAKF,EAASG,SAFhB,UAIGnB,EACEoB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,MAAQD,EAAEC,KAAtB,IACLC,KAAI,SAACC,EAAQC,GAAT,OACH,SAAC,KAAD,CAEEC,YAAaF,EAAOG,GACpBF,MAAOA,EAHT,SAKG,SAAAV,GAAQ,OACP,SAAC,KAAD,CAAYA,SAAUA,EAAUS,OAAQA,GADjC,GAJJA,EAAOG,GAFX,IAWNZ,EAASa,eAlBL,OAuBb,0BACE,UAAC7C,EAAD,CAAiB+B,KAAK,SAASe,QAAS/B,EAAxC,WACE,SAACP,EAAD,WACE,SAAC,KAAD,CAASuC,QAAQ,YAAYC,QAAQ,aAAaC,KAAM,OAC7C,+BAMpBpC,IACC,SAAC,KAAD,CAAOC,gBAAiBA,EAAxB,UACE,SAAC,KAAD,CACEoC,QAASxC,EACTyC,YAAanC,EAAgBoC,OAC7BC,iBAAkBtC,QAM7B,C","sources":["pages/styles/boardStyles.styled.js","pages/Board.jsx"],"sourcesContent":["import { media } from 'helpers';\n\nimport styled from '@emotion/styled';\n\nexport const ContainerWrapper = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  padding-bottom: 24px;\n\n  ${media.MEDIUM`\n  padding-bottom: 52px;`}\n\n  ${media.LARGE`\n  padding-bottom: 16px;\n    `}\n`;\n\nexport const ColumnsContainer = styled.ul`\n  display: flex;\n  flex-wrap: nowrap;\n  gap: 28px;\n  margin-right: 21px;\n\n  ${media.MEDIUM`\n  gap: 34px;`}\n`;\n\nexport const ButtonAddColumn = styled.button`\n  background-color: ${props => props.theme.palette.background.cardItem};\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  width: 334px;\n  justify-content: center;\n  padding: 14px 0;\n  border-radius: 8px;\n  cursor: pointer;\n\n  color: ${props => props.theme.palette.text.primary};\n  font-size: 14px;\n  font-weight: 500;\n  letter-spacing: -0.28px;\n  transition: box-shadow 0.3s, transform 0.3s;\n\n  &:hover {\n    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n    transform: scale(1.02);\n  }\n`;\n\nexport const SpanStyled = styled.span`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: ${props => props.theme.palette.background.buttonPlusCard};\n  color: ${props => props.theme.palette.background.cardItem};\n  width: 28px;\n  height: 28px;\n  align-items: center;\n  border-radius: 8px;\n`;\n","import React from 'react';\nimport { DragDropContext, Draggable } from 'react-beautiful-dnd';\nimport { useDispatch } from 'react-redux';\nimport { processDndResult, StrictModeDroppable } from 'helpers';\nimport { useBoards, useColumns, useModal } from 'hooks';\n\nimport {\n  BoardHead,\n  CardColumn,\n  ColumnPopUp,\n  CustomScrollbar,\n  Modal,\n  SvgIcon,\n} from 'components';\n\nimport {\n  ButtonAddColumn,\n  ColumnsContainer,\n  ContainerWrapper,\n  SpanStyled,\n} from './styles/boardStyles.styled';\n\nconst Board = () => {\n  const { activeBoardId } = useBoards();\n  const { isModal, onBackdropClick, toggleModal } = useModal();\n  const { columnsAndTasks } = useColumns();\n  const dispatch = useDispatch();\n\n  const scrollbarStyles = {\n    '.os-scrollbar-handle': {\n      backgroundColor: '#bedbd0',\n    },\n  };\n  const onDragEnd = result => {\n    const resultProcessed = processDndResult(result, columnsAndTasks);\n    if (resultProcessed) {\n      const { process, arg } = resultProcessed;\n      dispatch(process(arg));\n    }\n  };\n\n  return (\n    <>\n      <BoardHead />\n      <CustomScrollbar height=\"100% - 68px\" scrollbarStyles={scrollbarStyles}>\n        <ContainerWrapper>\n          <DragDropContext onDragEnd={onDragEnd}>\n            <StrictModeDroppable\n              droppableId=\"all-columns\"\n              direction=\"horizontal\"\n              type=\"column\"\n            >\n              {provided => (\n                <ColumnsContainer\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                >\n                  {columnsAndTasks\n                    .sort((a, b) => a.order - b.order) // Sort columns by order\n                    .map((column, index) => (\n                      <Draggable\n                        key={column.id}\n                        draggableId={column.id}\n                        index={index}\n                      >\n                        {provided => (\n                          <CardColumn provided={provided} column={column} />\n                        )}\n                      </Draggable>\n                    ))}\n                  {provided.placeholder}\n                </ColumnsContainer>\n              )}\n            </StrictModeDroppable>\n          </DragDropContext>\n          <div>\n            <ButtonAddColumn type=\"button\" onClick={toggleModal}>\n              <SpanStyled>\n                <SvgIcon svgName=\"icon-plus\" variant=\"buttonCard\" size={14} />\n              </SpanStyled>\n              Add another column\n            </ButtonAddColumn>\n          </div>\n        </ContainerWrapper>\n      </CustomScrollbar>\n      {isModal && (\n        <Modal onBackdropClick={onBackdropClick}>\n          <ColumnPopUp\n            boardId={activeBoardId}\n            columnIndex={columnsAndTasks.length}\n            handleModalClose={toggleModal}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default Board;\n"],"names":["ContainerWrapper","styled","media","ColumnsContainer","ButtonAddColumn","props","theme","palette","background","cardItem","text","primary","SpanStyled","buttonPlusCard","activeBoardId","useBoards","useModal","isModal","onBackdropClick","toggleModal","columnsAndTasks","useColumns","dispatch","useDispatch","height","scrollbarStyles","backgroundColor","onDragEnd","result","resultProcessed","processDndResult","process","arg","droppableId","direction","type","provided","droppableProps","ref","innerRef","sort","a","b","order","map","column","index","draggableId","id","placeholder","onClick","svgName","variant","size","boardId","columnIndex","length","handleModalClose"],"sourceRoot":""}