{"version":3,"file":"static/js/399.88e6a077.chunk.js","mappings":"0VAEaA,EAAYC,EAAAA,QAAAA,IAAH,qZAEA,SAAAC,GAAK,gBAAOA,EAAMC,MAAMC,QAAQC,WAAWC,KAAtC,IAED,SAAAJ,GAAK,OAAIA,EAAMK,EAAV,IAEpB,SAAAL,GAAK,gBAAOA,EAAMC,MAAMC,QAAQI,KAAKC,QAAhC,SAaHC,EAAiBT,EAAAA,QAAAA,IAAH,yWAoBdU,EAAcV,EAAAA,QAAAA,EAAH,wJAKb,SAAAC,GAAK,gBAAOA,EAAMC,MAAMC,QAAQI,KAAKC,QAAhC,SAIHG,EAAkBX,EAAAA,QAAAA,EAAH,qFAGjB,SAAAC,GAAK,gBAAOA,EAAMC,MAAMC,QAAQS,MAAMC,aAAjC,I,UCmChB,EApEiB,WACf,OAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAuDC,EAAAA,EAAAA,MAA/CC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,YAAaC,EAApC,EAAoCA,eACpC,GAAkDC,EAAAA,EAAAA,MAA1CC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,YAAaC,EAA9B,EAA8BA,gBAC9B,GAA0BC,EAAAA,EAAAA,MAAnBC,GAAP,eACMC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IAErBC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MA+BjB,OA7BAC,EAAAA,EAAAA,YAAU,WACRF,EAASG,EAAAA,GAAAA,cACV,GAAE,CAACH,KAGJE,EAAAA,EAAAA,YAAU,WACR,GAAInB,GAAaY,EAAOS,OAAS,IAAMjB,EAAa,CAClD,IAAMkB,EAAaV,EAAO,GAC1B,GAAIU,EAAY,CACdjB,EAAeiB,EAAWC,IAE1B,IAAMC,EAAeC,mBAAmBH,EAAWI,OACnDX,EAAS,GAAD,OAAIS,GACb,CACDvB,GAAa,EACd,CACF,GAAE,CAACG,EAAaD,EAAeS,EAAQZ,EAAWe,EAAUV,KAE7Dc,EAAAA,EAAAA,YAAU,WAAM,wCACd,kFACMhB,EADN,gCAEUc,EAASU,EAAAA,GAAAA,aAA+BxB,IAFlD,uBAGUc,EAASW,EAAAA,GAAAA,WAA0BzB,IAH7C,4CADc,uBAAC,WAAD,wBAQd0B,EACD,GAAE,CAACZ,EAAUd,KAGZ,SAAC2B,EAAA,EAAD,WACE,UAAC9C,EAAD,CAAWO,GAAIoB,EAAf,UACGR,GACC,+BACE,SAAC,KAAD,OAGF,SAACT,EAAD,CAAgBqC,cAAenB,EAA/B,UACE,UAACjB,EAAD,WAAa,mDACsC,KACjD,SAACC,EAAD,CAAiBoC,QAASxB,EAA1B,SAAuC,mBAEpB,IAAI,2LAO5BD,IACC,SAAC,KAAD,CAAOE,gBAAiBA,EAAxB,UACE,SAAC,KAAD,CAAYwB,QAASzB,UAMhC,C","sources":["pages/styles/homePage.styled.js","pages/HomePage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const BoardWrap = styled.div`\n  padding: 14px 20px;\n  background-color: ${props => `${props.theme.palette.background.bord}`};\n  background-repeat: no-repeat;\n  background-image: url(${props => props.bg});\n  background-size: cover;\n  color: ${props => `${props.theme.palette.text.primary}B2`};\n  min-height: calc(100vh - 60px);\n\n  @media screen and (min-width: 768px) {\n    padding: 26px 32px;\n    min-height: calc(100vh - 68px);\n  }\n\n  @media screen and (min-width: 1440px) {\n    padding: 10px 24px 36px;\n  }\n`;\n\nexport const DefaultWrapper = styled.div`\n  width: 100%;\n  height: calc(100vh - 60px);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n\n  @media screen and (min-width: 375px) {\n    padding: 0 20px;\n    width: 375px;\n  }\n\n  @media screen and (min-width: 768px) {\n    padding: 0;\n    width: 486px;\n  }\n`;\n\nexport const WelcomeText = styled.p`\n  font-size: 12px;\n  font-weight: 400;\n  line-height: 1.3;\n  letter-spacing: -0.24px;\n  color: ${props => `${props.theme.palette.text.primary}B2`};\n  text-align: center;\n`;\n\nexport const CreateBoardLink = styled.a`\n  text-decoration: none;\n  cursor: pointer;\n  color: ${props => `${props.theme.palette.hover.inputAndIcon}`};\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { Outlet, useNavigate } from 'react-router-dom';\nimport { useBackground, useBoardContext, useModal } from 'hooks';\nimport { boardsOperations } from 'redux/boards';\nimport { selectAllBoards } from 'redux/boards/boardSelectors';\nimport { columnsOperations } from 'redux/columns';\nimport { cardOperations } from 'redux/tasks';\nimport SharedLayout from 'sharedLayout/SharedLayout';\n\nimport { BoardPopUp, Modal } from 'components';\n\nimport {\n  BoardWrap,\n  CreateBoardLink,\n  DefaultWrapper,\n  WelcomeText,\n} from './styles/homePage.styled';\n\nconst HomePage = () => {\n  const [firstLoad, setFirstLoad] = useState(true);\n  const { activeBoardId, activeBoard, setActiveBoard } = useBoardContext();\n  const { isModal, toggleModal, onBackdropClick } = useModal();\n  const [backgroundImage] = useBackground();\n  const boards = useSelector(selectAllBoards);\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(boardsOperations.fetchBoards());\n  }, [dispatch]);\n\n  // Отримання id активної дошки та розкодування id в назву і її додавання до адресного рядка\n  useEffect(() => {\n    if (firstLoad && boards.length > 0 && !activeBoard) {\n      const firstBoard = boards[0];\n      if (firstBoard) {\n        setActiveBoard(firstBoard.id);\n\n        const encodedTitle = encodeURIComponent(firstBoard.title);\n        navigate(`${encodedTitle}`);\n      }\n      setFirstLoad(false);\n    }\n  }, [activeBoard, activeBoardId, boards, firstLoad, navigate, setActiveBoard]);\n\n  useEffect(() => {\n    async function fetchData() {\n      if (activeBoardId) {\n        await dispatch(columnsOperations.fetchColumns(activeBoardId));\n        await dispatch(cardOperations.fetchTasks(activeBoardId));\n      }\n    }\n\n    fetchData();\n  }, [dispatch, activeBoardId]);\n\n  return (\n    <SharedLayout>\n      <BoardWrap bg={backgroundImage}>\n        {activeBoardId ? (\n          <>\n            <Outlet />\n          </>\n        ) : (\n          <DefaultWrapper defaultBoard={!boards}>\n            <WelcomeText>\n              Before starting your project, it is essential to{' '}\n              <CreateBoardLink onClick={toggleModal}>\n                create a board\n              </CreateBoardLink>{' '}\n              to visualize and track all the necessary tasks and milestones.\n              This board serves as a powerful tool to organize the workflow and\n              ensure effective collaboration among team members.\n            </WelcomeText>\n          </DefaultWrapper>\n        )}\n        {isModal && (\n          <Modal onBackdropClick={onBackdropClick}>\n            <BoardPopUp onClose={toggleModal} />\n          </Modal>\n        )}\n      </BoardWrap>\n    </SharedLayout>\n  );\n};\nexport default HomePage;\n"],"names":["BoardWrap","styled","props","theme","palette","background","bord","bg","text","primary","DefaultWrapper","WelcomeText","CreateBoardLink","hover","inputAndIcon","useState","firstLoad","setFirstLoad","useBoardContext","activeBoardId","activeBoard","setActiveBoard","useModal","isModal","toggleModal","onBackdropClick","useBackground","backgroundImage","boards","useSelector","selectAllBoards","navigate","useNavigate","dispatch","useDispatch","useEffect","boardsOperations","length","firstBoard","id","encodedTitle","encodeURIComponent","title","columnsOperations","cardOperations","fetchData","SharedLayout","defaultBoard","onClick","onClose"],"sourceRoot":""}